#!/usr/bin/env elixir

defmodule NeovimPlugins do
  @moduledoc """
  Generates a README file for my Neovim plugins directory by parsing each file
  and extracting plugin metadata.
  """
  @xdg_config_home System.get_env("XDG_CONFIG_HOME")
  @output_path "#{@xdg_config_home}/nvim/lua/plugins/README.md"
  @file_titles %{
    "ai" => "Artificial Intelligence",
    "analysis" => "Static Analysis",
    "init" => "Initialization",
    "lsp" => "Language Server Protocol",
    "misc" => "Miscellaneous",
    "treesitter" => "Tree-sitter"
  }

  def run do
    filenames =
      get_nvim_plugins_path()
      |> File.ls!()
      |> Enum.filter(&String.ends_with?(&1, ".lua"))

    metadata =
      filenames
      |> Enum.map(fn name ->
        file = get_nvim_plugins_path(name)
        extract_file_metadata!(file)
      end)
      |> Enum.sort_by(& &1.title)
      |> ensure_init_section_first()

    write_readme!(metadata)
  end

  defp get_nvim_plugins_path(name \\ "") do
    "#{@xdg_config_home}/nvim/lua/plugins/#{name}"
  end

  defp extract_file_metadata!(file) do
    %{
      title: get_file_title(file),
      plugins:
        file
        |> File.read!()
        |> String.split("\n")
        |> extract_plugins_metadata()
    }
  end

  defp get_file_title(file) do
    "#{@xdg_config_home}/nvim/lua/plugins/" <> name = file
    title = String.trim_trailing(name, ".lua")

    case Map.get(@file_titles, title) do
      nil ->
        title
        |> String.split("_")
        |> Enum.map(&String.capitalize/1)
        |> Enum.join(" ")

      title ->
        title
    end
  end

  defp extract_plugins_metadata([_, _, _ | lines]) do
    extract_plugins_metadata(lines, [])
  end

  defp extract_plugins_metadata([], metadata), do: metadata

  defp extract_plugins_metadata([line | lines], metadata) do
    {lines, metadata} =
      if is_header_line?(line) do
        [name_line, _, url_line, desc_line | rest_lines] = lines

        data = %{
          name: parse_line(name_line),
          url: parse_line(url_line),
          desc: parse_line(desc_line)
        }

        {rest_lines, metadata ++ [data]}
      else
        {lines, metadata}
      end

    extract_plugins_metadata(lines, metadata)
  end

  defp is_header_line?(line), do: Regex.match?(~r/\s*-- =/, line)

  defp parse_line(line) do
    <<_::bytes-size(7)>> <> text = String.trim_leading(line)
    text
  end

  defp ensure_init_section_first(sections) do
    Enum.slide(sections, Enum.find_index(sections, &(&1.title == "Initialization")), 0)
  end

  defp write_readme!(metadata) do
    file_sections =
      Enum.reduce(metadata, [], fn file, sections ->
        plugins =
          file.plugins
          |> Enum.map(fn plugin ->
            "- [#{plugin.name}](#{plugin.url}): #{plugin.desc}"
          end)
          |> Enum.join("\n")

        sections ++ ["## #{file.title}", plugins]
      end)

    contents =
      [
        "<!-- Generated by nvim-plugins script -->",
        "# Neovim Plugins"
      ]
      |> Kernel.++(file_sections)
      |> Enum.join("\n")

    File.write!(@output_path, contents)
  end
end

NeovimPlugins.run()
